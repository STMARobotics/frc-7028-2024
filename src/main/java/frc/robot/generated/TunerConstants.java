package frc.robot.generated;

import static edu.wpi.first.units.Units.*;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.CANcoderConfiguration;
import com.ctre.phoenix6.configs.CurrentLimitsConfigs;
import com.ctre.phoenix6.configs.MountPoseConfigs;
import com.ctre.phoenix6.configs.Pigeon2Configuration;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.ClosedLoopOutputType;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory;
import edu.wpi.first.units.measure.*;
import frc.robot.Constants;
import frc.robot.Robot;
import frc.robot.subsystems.CommandSwerveDrivetrain;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
  // Both sets of gains need to be tuned to your individual robot.

  // The steer motor uses any SwerveModule.SteerRequestType control request with the
  // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
  private static final Slot0Configs steerGains = new Slot0Configs().withKP(100)
      .withKI(0)
      .withKD(0.05)
      .withKS(0.18)
      .withKV(1.5)
      .withKA(0);
  // When using closed-loop control, the drive motor uses the control
  // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
  private static final Slot0Configs driveGains = new Slot0Configs().withKP(2.5)
      .withKI(0)
      .withKD(0)
      .withKS(0.78)
      .withKV(0)
      .withKA(0);

  // The closed-loop output type to use for the steer motors;
  // This affects the PID/FF gains for the steer motors
  private static final ClosedLoopOutputType kSteerClosedLoopOutput = ClosedLoopOutputType.Voltage;
  // The closed-loop output type to use for the drive motors;
  // This affects the PID/FF gains for the drive motors
  private static final ClosedLoopOutputType kDriveClosedLoopOutput = Robot.isSimulation() ? ClosedLoopOutputType.Voltage
      : ClosedLoopOutputType.TorqueCurrentFOC;

  // The remote sensor feedback type to use for the steer motors;
  // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
  private static final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

  // The stator current at which the wheels start to slip;
  // This needs to be tuned to your individual robot
  private static final Current kSlipCurrent = Amps.of(70.0);

  // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
  // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
  private static final TalonFXConfiguration driveInitialConfigs = new TalonFXConfiguration();
  private static final TalonFXConfiguration steerInitialConfigs = new TalonFXConfiguration().withCurrentLimits(
      new CurrentLimitsConfigs()
          // Swerve azimuth does not require much torque output, so we can set a relatively low
          // stator current limit to help avoid brownouts without impacting performance.
          .withStatorCurrentLimit(Amps.of(60))
          .withStatorCurrentLimitEnable(true));
  private static final CANcoderConfiguration cancoderInitialConfigs = new CANcoderConfiguration();
  // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
  private static final Pigeon2Configuration pigeonConfigs = new Pigeon2Configuration().withMountPose(
      new MountPoseConfigs().withMountPosePitch(9.096435546875)
          .withMountPoseRoll(-154.05722045898438)
          .withMountPoseYaw(6.09066915512085));

  // Theoretical free speed (m/s) at 12 V applied output;
  // This needs to be tuned to your individual robot
  public static final LinearVelocity kSpeedAt12Volts = Constants.DrivetrainConstants.MAX_VELOCITY;

  // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
  // This may need to be tuned to your individual robot
  private static final double kCoupleRatio = 3.5714285714285716;

  private static final double kDriveGearRatio = 6.122448979591837;
  private static final double kMk4iSteerGearRatio = 150.0 / 7.0;
  private static final double kMk4SteerGearRatio = 12.8;
  private static final Distance kWheelRadius = Inches.of(1.9135);

  private static final boolean kInvertLeftSide = false;
  private static final boolean kInvertRightSide = true;

  private static final CANBus kCANBus = new CANBus("rio", "./logs/example.hoot");
  private static final int kPigeonId = 30;

  // These are only used for simulation
  private static final double kSteerInertia = 0.00001;
  private static final double kDriveInertia = 0.001;
  // Simulated voltage necessary to overcome friction
  private static final Voltage kSteerFrictionVoltage = Volts.of(0.25);
  private static final Voltage kDriveFrictionVoltage = Volts.of(0.25);

  public static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
      .withCANBusName(kCANBus.getName())
      .withPigeon2Id(kPigeonId)
      .withPigeon2Configs(pigeonConfigs);

  private static final SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> ConstantCreator = new SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>()
      .withDriveMotorGearRatio(kDriveGearRatio)
      .withCouplingGearRatio(kCoupleRatio)
      .withWheelRadius(kWheelRadius)
      .withSteerMotorGains(steerGains)
      .withDriveMotorGains(driveGains)
      .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
      .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
      .withSlipCurrent(kSlipCurrent)
      .withSpeedAt12Volts(kSpeedAt12Volts)
      .withFeedbackSource(kSteerFeedbackType)
      .withDriveMotorInitialConfigs(driveInitialConfigs)
      .withSteerMotorInitialConfigs(steerInitialConfigs)
      .withEncoderInitialConfigs(cancoderInitialConfigs)
      .withSteerInertia(kSteerInertia)
      .withDriveInertia(kDriveInertia)
      .withSteerFrictionVoltage(kSteerFrictionVoltage)
      .withDriveFrictionVoltage(kDriveFrictionVoltage);

  // Front Left
  private static final int kFrontLeftDriveMotorId = 3;
  private static final int kFrontLeftSteerMotorId = 13;
  private static final int kFrontLeftEncoderId = 23;
  private static final Angle kFrontLeftEncoderOffset = Rotations.of(-0.184814);
  private static final boolean kFrontLeftSteerMotorInverted = false;

  private static final Distance kFrontLeftXPos = Inches.of(7.5);
  private static final Distance kFrontLeftYPos = Inches.of(10.25);

  // Front Right
  private static final int kFrontRightDriveMotorId = 1;
  private static final int kFrontRightSteerMotorId = 11;
  private static final int kFrontRightEncoderId = 21;
  private static final Angle kFrontRightEncoderOffset = Rotations.of(-0.292968);
  private static final boolean kFrontRightSteerMotorInverted = false;

  private static final Distance kFrontRightXPos = Inches.of(7.5);
  private static final Distance kFrontRightYPos = Inches.of(-10.25);

  // Back Left
  private static final int kBackLeftDriveMotorId = 2;
  private static final int kBackLeftSteerMotorId = 12;
  private static final int kBackLeftEncoderId = 22;
  private static final Angle kBackLeftEncoderOffset = Rotations.of(0.301758);
  private static final boolean kBackLeftSteerMotorInverted = true;

  private static final Distance kBackLeftXPos = Inches.of(-13.625);
  private static final Distance kBackLeftYPos = Inches.of(10.875);

  // Back Right
  private static final int kBackRightDriveMotorId = 0;
  private static final int kBackRightSteerMotorId = 10;
  private static final int kBackRightEncoderId = 20;
  private static final Angle kBackRightEncoderOffset = Rotations.of(-0.351807);
  private static final boolean kBackRightSteerMotorInverted = true;

  private static final Distance kBackRightXPos = Inches.of(-13.625);
  private static final Distance kBackRightYPos = Inches.of(-10.875);

  public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> FrontLeft = ConstantCreator
      .withSteerMotorGearRatio(kMk4iSteerGearRatio)
      .createModuleConstants(
          kFrontLeftSteerMotorId,
            kFrontLeftDriveMotorId,
            kFrontLeftEncoderId,
            kFrontLeftEncoderOffset,
            kFrontLeftXPos,
            kFrontLeftYPos,
            kInvertLeftSide,
            kFrontLeftSteerMotorInverted,
            false);
  public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> FrontRight = ConstantCreator
      .withSteerMotorGearRatio(kMk4iSteerGearRatio)
      .createModuleConstants(
          kFrontRightSteerMotorId,
            kFrontRightDriveMotorId,
            kFrontRightEncoderId,
            kFrontRightEncoderOffset,
            kFrontRightXPos,
            kFrontRightYPos,
            kInvertRightSide,
            kFrontRightSteerMotorInverted,
            false);
  public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> BackLeft = ConstantCreator
      .withSteerMotorGearRatio(kMk4SteerGearRatio)
      .createModuleConstants(
          kBackLeftSteerMotorId,
            kBackLeftDriveMotorId,
            kBackLeftEncoderId,
            kBackLeftEncoderOffset,
            kBackLeftXPos,
            kBackLeftYPos,
            kInvertLeftSide,
            kBackLeftSteerMotorInverted,
            false);
  public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> BackRight = ConstantCreator
      .withSteerMotorGearRatio(kMk4SteerGearRatio)
      .createModuleConstants(
          kBackRightSteerMotorId,
            kBackRightDriveMotorId,
            kBackRightEncoderId,
            kBackRightEncoderOffset,
            kBackRightXPos,
            kBackRightYPos,
            kInvertRightSide,
            kBackRightSteerMotorInverted,
            false);

  /**
   * Creates a CommandSwerveDrivetrain instance.
   * This should only be called once in your robot program,.
   */
  public static CommandSwerveDrivetrain createDrivetrain() {
    return new CommandSwerveDrivetrain(DrivetrainConstants, FrontLeft, FrontRight, BackLeft, BackRight);
  }
}
